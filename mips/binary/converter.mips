.data
	
.text

# gets address of string input in $a0
# must return base 10 integer in register $v0

#first count characters in string
binary_convert:
reverse_string:
	li	$t0, 0		#$t0 is the counter for our loop
	move	$t9, $sp	#$t9 where we stop
reverse_string_loop_start:
	add	$t2, $a0, $t0	#$t2 is the address of the next characte
	lb	$t6,($t2)	#$t6 is the next character.
	sb	$t6,($sp)
	subi	$sp,$sp,1
	beq	$t6,'\0',conversion_prep
	addi	$t0, $t0, 1
	j	reverse_string_loop_start

conversion_prep:
	
	move	$t8, $sp	#$t8 where we start
	move	$sp, $t9	#reset stack pointer
        li	$t0, 0	#$t0 is the counter (which character are we on?)
        li	$v0, 0	#$v0 is the result. Start with 0
start:
	add	$t2,$t8,$t0	#$t2 is address of next character
	lb	$t1,($t2)	#load next character into $t1
	beq	$t2,$t9,done_with_string
        
        # if it is 0, continue without doing anything
        beq	$t1,'0',done_iteration
        
	bne	$t1,'1',else
	# if it is 1, add 2^n to result, where n is the counter
	# special case: 2^0 = 1
	bne	$t0, 0, check_first_power
	addiu	$v0,$v0,1
	j	done_iteration
	
check_first_power: #special case: 2^1 = 2
	bne	$t0, 1, loop_initial
	addiu	$v0,$v0,2
	j	done_iteration
	
	
loop_initial:
	li	$t3, 2	#$t3 is counter for this loop. Starting at 2 because counter is n
			#for 2^n and we have already checked 2^0 and 2^1
	li	$t4, 2	#$t4 is number to add to result
	li	$t5, 2	#$t5 is the constant we're multiplying by

loop:	# loop to find 2^n
	mult	$t4, $t5
	mflo	$t4
	
	beq	$t3,$t0,end_loop
	addiu	$t3,$t3,1
	j	loop
	
end_loop:
	add	$v0,$v0,$t4
	j	done_iteration

else:
	j	error	#not a zero, not a one, not null terminator.... we have run into something weird

done_iteration:
	#beq	$t8,$t2,done_with_string // don't need because we check as soon as we increment ....
	addiu	$t0,$t0,1
	j	start
		
error:	
	#???? handle error. Maybe print it.

done_with_string:
	#value is already in $v0. Nothing to do. 
	jr	$ra
